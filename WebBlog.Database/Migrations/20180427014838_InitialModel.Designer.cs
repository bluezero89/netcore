// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WebBlog.Database.Data;

namespace WebBlog.Database.Migrations
{
    [DbContext(typeof(WebBlogDbContext))]
    [Migration("20180427014838_InitialModel")]
    partial class InitialModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebBlog.Database.Models.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BriefContent");

                    b.Property<int?>("CategoryArticleId");

                    b.Property<string>("CategoryArticleName");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Ext");

                    b.Property<string>("Ext1");

                    b.Property<string>("Ext2");

                    b.Property<string>("Ext3");

                    b.Property<string>("FullContent");

                    b.Property<string>("Image");

                    b.Property<int?>("Index");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsHot");

                    b.Property<bool>("IsVisible");

                    b.Property<int?>("Position");

                    b.Property<string>("SEName")
                        .HasMaxLength(4000);

                    b.Property<string>("SEODescription")
                        .HasMaxLength(4000);

                    b.Property<string>("SEOKeywords")
                        .HasMaxLength(4000);

                    b.Property<string>("SEOTitle")
                        .HasMaxLength(4000);

                    b.Property<string>("Source");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<int>("ViewCount");

                    b.HasKey("ArticleId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("WebBlog.Database.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("HasChildren");

                    b.Property<bool>("HasUrl");

                    b.Property<string>("Image");

                    b.Property<int>("Index");

                    b.Property<string>("Language")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ParentId");

                    b.Property<string>("ParentName");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("Url");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("WebBlog.Database.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArticleId");

                    b.Property<int?>("CommentId1");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Ext");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ParentId");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentId1");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("WebBlog.Database.Models.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryMediaId");

                    b.Property<string>("CategoryMediaName");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Ext");

                    b.Property<int>("HostId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link");

                    b.Property<string>("Name");

                    b.Property<string>("ReferenceSource");

                    b.Property<string>("SEName")
                        .HasMaxLength(4000);

                    b.Property<string>("SEODescription")
                        .HasMaxLength(4000);

                    b.Property<string>("SEOKeywords")
                        .HasMaxLength(4000);

                    b.Property<string>("SEOTitle")
                        .HasMaxLength(4000);

                    b.Property<string>("Source");

                    b.Property<string>("Type");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("MediaId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("WebBlog.Database.Models.Comment", b =>
                {
                    b.HasOne("WebBlog.Database.Models.Comment")
                        .WithMany("Children")
                        .HasForeignKey("CommentId1");
                });
#pragma warning restore 612, 618
        }
    }
}
